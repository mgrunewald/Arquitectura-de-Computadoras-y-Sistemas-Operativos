Martina Grünewald
mgrunewald@udesa.edu.ar

Primera fase:
Las instrucciones establecían que, si al llamar a la función <strings_not_equal> se retornaba un valor negativo, se realizaría un salto a la función <explode_bomb>. Para evitar esto, se buscó el valor esperado a introducir que haga que la función retorne positivo, ya que la función verificaría que el input sea igual al esperado.
El parámetro utilizado por la función <strings_not_equal> está almacenado en rsi. Por lo tanto, después de la última modificación de este registro, se utilizó "x/s" para ver a qué estaba apuntando rsi e imprimir en pantalla el valor de entrada esperado, el cual se compararía con el input introducido. Entonces se utilizó esa frase guardada en la dirección de memoria rsi como clave para que la bomba pase la fase.
La frase era "La ingratitud es hija de la soberbia."

Segunda fase:
En esta fase se utiliza la función <strtol>, la cual procesa datos strings como tipo long. Se utiliza dos veces, dando a entender que la entrada esperada son dos números separados por un espacio. Un dato se almacenaba en el registro rax y el otro en el rbx. Estos registros se utilizaban en la función <misterio>, la cual establecía condiciones para las cuales estos números hacían que la bomba explote. 
En la función <misterio>, había dos condiciones principales que se debían cumplir para que no se ejecute <explode_bomb>; que el registro rdx sea 11 y que al hacer xor entre los valores de rxb y rbp se devuelva un valor positivo (que el primer bit del xor sea 0). Lo primero que se hizo, fue simplificar ambas condiciones y ponerlas en función de rax y rbx, nuestros dos números ingresados en el input. Dado a que rdx era el contador de bits encendidos de rdi, y rdi era rax+rbx-0x20 se simplificó la condición estableciendo que rax+rbx debía ser 2047 (11111111111) + 32 (0x20), es decir que los números ingresados debían sumar 2079. Para simplificar la segunda condición, dado que rbp cargaba el valor que rax le había dadp a rdx, se simplificó la segunda condición diciendo que se necesitaba que el xor entre rax y rbx debía ser positivo. 
Entonces, juntando las condiciones para evitar la explosión de la bomba, se necesita que los dos números ingresados sumen 2079 y que al hacer xor den un binario que tenga su primer bit apagado, es decir que tengan el primer bit igual. Probando con binarios que cumplan, se encontró la dupla de números -993 y 3072. Suman 2079 y al hacer xor entre ellos tienen el mismo primer bit encendido. 

Tercer fase: 
La primera condición de detonación de la bomba es la que verifica que después de <sscanf> rax no sea 2, es decir que si no hay dos elementos en el input ingresado se ejecuta <explode_bomb>. Primera pista: espera dos valores. Luego, al aparecer las funciones <readlines> y <cuenta>, se pudo intuir que la bomba espera una palabra y un número. La función <cuenta>, era recursiva y funcionaba como una búsqueda binaria, buscando a la palabra ingresada. El resultado de esta función era la suma de todos los índices en los cuales se hizo el corte par buscar la palabra. Este retorno en phase_3 debía ser mayor a 9999, es decir que la palabra dentro de las lista de palabras.txt no debía estar muy al comienzo o exactamente en la posición de los primeros cortes, porque nunca llegaría a ser mayor que 9999.
Recapitulando, las condiciones bajo las cuales no explota la bomba son que la suma de las posiciones de corte sea mayor a 9999 e igual al número que se ingresa junto a la palbra. Entonces se escogió una palabra y se buscó cual sería su resultado en cuenta, para que el input sea esa palabra y la suma de las posiciones de corte hasta entonctrarla. Se escogió la palabra "transformar" y su valor en cuenta 125963. 

Cuarta fase:
Esta última fase, tras usar <sscanf> verificaba que rax sea 1, es decir que es un único string, espera una palabra como clave. La condición principal para pasar la fase era que si se recorrían todos los bytes de rdi y rsi estos coincidieran en cada posición. El registro rdi apuntaba a la palabra "lechon", dando a entender que rsi debe ser "lechon" para que no se ejecute <explode_bomb>. Pero rsi no era igual al input ingresado, sino que cada letra del input se convería en otra en el segundo loop, el que itera 6 veces, uno por cada letra. Se tomaba el valor ascii de cada letra, usando este valor en binario para cambiar su dirección a otro ascii de otra letra. Se intentó usar de input todo el abecedario hasta encontrar que letras llevaban a las letras l, e, c, h, o, n. Se concluyó que la palabra "opckhj", en el loop que itera y cambia las letras, lleva a la palabra "lechon".
Entonces opckhj es la clave que pasa la fase. 

Y así se desactiva la bomba. 